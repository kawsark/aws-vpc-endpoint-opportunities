AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates a VPC with Managed NAT, similar to the VPC Wizard at https://console.aws.amazon.com/vpc/home#wizardFullpagePublicAndPrivate: (extended from VPC_with_PublicIPs_And_DNS.template sample)"
Parameters:
  VPCName:
    Description: The name of the VPC being created.
    Type: String
    Default: "VPC Public and Private with NAT"

  EC2InstanceType:
    Description: EC2 instance type on which IDE runs
    Type:        String
    Default:     m5.large
  
  Route53QueryString: 
    Description: CloudWatch Logs Query String to query Route53 Logs
    Type: String
    Default: "fields @timestamp, query_name | filter query_name ~= 'amazonaws.com.' stats count () as queryCount by query_name sort queryCount desc limit 20"
  
  VPCFlowLogsQueryString: 
    Description: CloudWatch Logs Query String to query VPC Flow Logs
    Type: String
    Default: "fields @timestamp, query_name | filter query_name ~= 'amazonaws.com.' stats count () as queryCount by query_name sort queryCount desc limit 20"
  
  Env:
    Description:    Please specify the target Env. Used for tagging and resource names. Mandatory LOWER CASE.
    Type:           String
    Default:        "poc"
    AllowedValues:
      - poc
      - dev
      - prod

  User:
    Description:    Please specify the User.
    Type:           String
    Default:        "test"

  RepositoryName:
    Description:    CodeCommit Repository Name
    Type:           String
    Default:        'CodeCommitRepoExample'

  AMI:
    Description:    The AMI for this machine
    Type:           String
    Default:        "amazonlinux-2-x86_64"

Mappings:
  SubnetConfig:
    VPC:
      CIDR: "10.0.0.0/16"
    Public0:
      CIDR: "10.0.0.0/24"
    Public1:
      CIDR: "10.0.1.0/24"
    Private0:
      CIDR: "10.0.2.0/24"
    Private1:
      CIDR: "10.0.3.0/24"

  # This mapping accounts for the scenario when certain AZs
  # are not available to use (this differs on a per account
  # per customer basis). E.g., if the 'b' AZ is not available
  # in a specific region in one's account then updating the
  # list contained in the mapping below here will allow a
  # different AZ to be chosen.
  AZRegions:
    ap-northeast-1:
      AZs: ["a", "b"]
    ap-northeast-2:
      AZs: ["a", "b"]
    ap-south-1:
      AZs: ["a", "b"]
    ap-southeast-1:
      AZs: ["a", "b"]
    ap-southeast-2:
      AZs: ["a", "b"]
    ca-central-1:
      AZs: ["a", "b"]
    eu-central-1:
      AZs: ["a", "b"]
    eu-west-1:
      AZs: ["a", "b"]
    eu-west-2:
      AZs: ["a", "b"]
    sa-east-1:
      AZs: ["a", "b"]
    us-east-1:
      AZs: ["a", "b"]
    us-east-2:
      AZs: ["a", "b"]
    us-west-1:
      AZs: ["a", "b"]
    us-west-2:
      AZs: ["a", "b"]

#1. VPC
Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "VPC"
          - "CIDR"
      Tags:
        -
          Key: "Application"
          Value: !Ref AWS::StackName
        -
          Key: "Network"
          Value: "Public"
        -
          Key: "Name"
          Value: !Ref VPCName

  PublicSubnet0:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "Public0"
          - "CIDR"
      MapPublicIpOnLaunch: "true"
      Tags:
        -
          Key: "Application"
          Value: !Ref AWS::StackName
        -
          Key: "Network"
          Value: "Public"
        -
          Key: "Name"
          Value: !Join
            - ''
            - - !Ref VPCName
              - '-public-'
              - !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]

  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "Public1"
          - "CIDR"
      MapPublicIpOnLaunch: "true"
      Tags:
        -
          Key: "Application"
          Value:
            !Ref AWS::StackName
        -
          Key: "Network"
          Value: "Public"
        -
          Key: "Name"
          Value: !Join
            - ''
            - - !Ref VPCName
              - '-public-'
              - !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]

  PrivateSubnet0:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "Private0"
          - "CIDR"
      Tags:
        -
          Key: "Application"
          Value:
            !Ref AWS::StackName
        -
          Key: "Network"
          Value: "Private"
        -
          Key: "Name"
          Value: !Join
            - ''
            - - !Ref VPCName
              - '-private-'
              - !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]

  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "Private1"
          - "CIDR"
      Tags:
        -
          Key: "Application"
          Value: !Ref AWS::StackName
        -
          Key: "Network"
          Value: "Private"
        -
          Key: "Name"
          Value: !Join
            - ''
            - - !Ref VPCName
              - '-private-'
              - !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        -
          Key: "Application"
          Value: !Ref AWS::StackName
        -
          Key: "Network"
          Value: "Public"
        -
          Key: "Name"
          Value: !Join
            - ''
            - - !Ref "VPCName"
              - '-IGW'


  GatewayToInternet:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        -
          Key: "Application"
          Value: !Ref AWS::StackName
        -
          Key: "Network"
          Value: "Public"
        -
          Key: "Name"
          Value: !Join
            - ''
            - - !Ref "VPCName"
              - '-public-route-table'


  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: "GatewayToInternet"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation0:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet0
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicNetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref VPC
      Tags:
        -
          Key: "Application"
          Value: !Ref AWS::StackName
        -
          Key: "Network"
          Value: "Public"
        -
          Key: "Name"
          Value: !Join
            - ''
            - - !Ref "VPCName"
              - '-public-nacl'



  InboundHTTPPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"

  OutboundPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"

  PublicSubnetNetworkAclAssociation0:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet0
      NetworkAclId: !Ref PublicNetworkAcl

  PublicSubnetNetworkAclAssociation1:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref PublicNetworkAcl

  ElasticIP0:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"

  ElasticIP1:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"

  NATGateway0:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId:
        Fn::GetAtt:
          - "ElasticIP0"
          - "AllocationId"
      SubnetId: !Ref PublicSubnet0

  NATGateway1:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId:
        Fn::GetAtt:
          - "ElasticIP1"
          - "AllocationId"
      SubnetId: !Ref PublicSubnet1

  PrivateRouteTable0:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        -
          Key: "Name"
          Value: !Join
            - ''
            - - !Ref "VPCName"
              - '-private-route-table-0'

  PrivateRouteTable1:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        -
          Key: "Name"
          Value: !Join
            - ''
            - - !Ref "VPCName"
              - '-private-route-table-1'

  PrivateRouteToInternet0:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateRouteTable0
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NATGateway0

  PrivateRouteToInternet1:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NATGateway1

  PrivateSubnetRouteTableAssociation0:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet0
      RouteTableId: !Ref PrivateRouteTable0

  PrivateSubnetRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  # CloudWatch Logs group for VPC Flow Logs
  VPCFLowLogsLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: 7

  VPCFlowLogsRole:
    Type: AWS::IAM::Role
    Properties: 
      Description: 'EC2 Role for writing VPC Flow logs'
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: flowlogs
                Effect: Allow
                Action: 
                  - 'ec2:DeleteFlowLogs'
                  - 'ec2:CreateFlowLogs'
                  - 'ec2:DescribeFlowLogs'
                Resource: '*'

  VPCFlowLog:
    Type: AWS::EC2::FlowLog
    Properties: 
      DeliverLogsPermissionArn: !GetAtt VPCFlowLogsRole.Arn
      LogDestination: !GetAtt VPCFLowLogsLogGroup.Arn
      LogDestinationType: cloud-watch-logs
      ResourceId: !Ref VPC
      ResourceType: VPC
      Tags: 
        - Key : Environment
          Value : Dev
      TrafficType: ALL
  
  # CloudWatch Logs group for Route 53 Query Logs
  Route53QueryLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: 7

  Route53QueryLoggingConfig:
    Type: "AWS::Route53Resolver::ResolverQueryLoggingConfig"
    Properties:
      DestinationArn: !GetAtt Route53QueryLogGroup.Arn

  Route53QueryLoggingConfigAssociation:
    Type: "AWS::Route53Resolver::ResolverQueryLoggingConfigAssociation"
    Properties:
      ResolverQueryLogConfigId: !GetAtt Route53QueryLoggingConfig.Id
      ResourceId: !Ref VPC

  # VPC Endpoint for CloudWatch Logs
  cwlInterfaceEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PrivateDnsEnabled: true
      VpcEndpointType: Interface
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.logs'
      VpcId: !Ref VPC
      SubnetIds: 
        - !Ref PrivateSubnet0

# 5. c9iam.yaml
  AWSCloud9SSMAccessRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - cloud9.amazonaws.com
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: 'Service linked role for AWS Cloud9'
      Path: '/service-role/'
      ManagedPolicyArns: 
#        - arn:aws:iam::aws:policy/AWSCloud9SSMInstanceProfile
        - arn:aws:iam::aws:policy/AdministratorAccess
      RoleName: 'AWSCloud9SSMAccessRole'

  AWSCloud9SSMInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      InstanceProfileName: AWSCloud9SSMInstanceProfile
      Path: "/cloud9/"
      Roles: 
        - 
          Ref: AWSCloud9SSMAccessRole

# C9.yaml
# Description: AWS Cloud9 Environment with AWS CodeCommit Repository

  C9IDE0:
    Type: 'AWS::Cloud9::EnvironmentEC2'
    Properties:
      Name: !Sub '${User}-${Env}-Cloud9-IDE0'
      Description: !Sub '${User} Cloud9 IDE PrivateSubnet0'
      AutomaticStopTimeMinutes: 30
      ConnectionType: CONNECT_SSM
      ImageId: !Sub ${AMI}
      SubnetId: !Ref PrivateSubnet0
      InstanceType: !Ref 'EC2InstanceType'
      Repositories:
          - RepositoryUrl: !Sub 'https://git-codecommit.${AWS::Region}.amazonaws.com/v1/repos/${RepositoryName}'
            PathComponent: !Sub 'codecommit/${RepositoryName}'

  # API Gateway to invoke lambda for querying CloudWatch Logs
  CWLogsQueryGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: CWLogsQueryGateway

  # Lambda function to query CloudWatch Logs Insight
  CWLogsQueryLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CWLogsQueryLambda
      Runtime: python3.8
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import os

          def lambda_handler(event, context):
              # Get environment variables
              log_group_name = os.environ.get('ROUTE53_LOG_GROUP_NAME')
              query_string = os.environ.get('ROUTE53_QUERY_STRING')

              # Create CloudWatch Logs Insights query
              client = boto3.client('logs')
              response = client.start_query(
                  logGroupName=log_group_name,
                  queryString=query_string
              )
              query_id = response['queryId']

              return {
                  'statusCode': 200,
                  'body': json.dumps(f'Query started with ID: {query_id}')
              }

      Environment:
        Variables:
          ROUTE53_LOG_GROUP_NAME: !Ref Route53QueryLogGroup
          ROUTE53_QUERY_STRING: !Ref Route53QueryString
          VPC_FLOW_LOGS_GROUP_NAME: !Ref VPCFLowLogsLogGroup
          VPC_FLOW_LOGS_QUERY_STRING: !Ref VPCFlowLogsQueryString

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  CWLogsQueryGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref CWLogsQueryGateway
      ParentId: !GetAtt CWLogsQueryGateway.RootResourceId
      PathPart: myresource

  CWLogsQueryGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref CWLogsQueryGateway
      ResourceId: !Ref CWLogsQueryGatewayResource
      HttpMethod: GET
      AuthorizationType: AWS_IAM
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunctionArn}/invocations
          - LambdaFunctionArn: !GetAtt CWLogsQueryLambda.Arn

Outputs:
  ApiEndpoint:
    Value: !Sub "https://${CWLogsQueryGateway}.execute-api.${AWS::Region}.amazonaws.com/prod"

  VPCId:
    Description: "VPCId of VPC"
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-VPCId"

  PublicSubnet0:
    Description: "SubnetId of public subnet 0"
    Value: !Ref PublicSubnet0
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-PublicSubnet0"

  PublicSubnet1:
    Description: "SubnetId of public subnet 1"
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-PublicSubnet1"

  PrivateSubnet0:
    Description: "SubnetId of private subnet 0"
    Value: !Ref PrivateSubnet0
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-PrivateSubnet0"

  PrivateSubnet1:
    Description: "SubnetId of private subnet 1"
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-PrivateSubnet1"

  DefaultSecurityGroup:
    Description: "DefaultSecurityGroup Id"
    Value: !GetAtt VPC.DefaultSecurityGroup
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-DefaultSecurityGroup"

  PrivateRouteTable1:
    Description: "PrivateRouteTable1 Id"
    Value: !GetAtt PrivateRouteTable1.RouteTableId

  PrivateRouteTable0:
    Description: "PrivateRouteTable0 Id"
    Value: !GetAtt PrivateRouteTable0.RouteTableId
  
  PublicRouteTable:
    Description: "PublicRouteTable Id"
    Value: !GetAtt PublicRouteTable.RouteTableId

  Cloud9URL0:
    Description: Cloud9 Environment
    Value:
      Fn::Join:
      - ''
      - - !Sub https://${AWS::Region}.console.aws.amazon.com/cloud9/ide/
        - !Ref 'C9IDE0'
